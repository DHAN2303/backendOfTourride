// <auto-generated />
using System;
using System.Collections.Generic;
using AllrideApiRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AllrideApiRepository.Migrations
{
    [DbContext(typeof(AllrideApiDbContext))]
    [Migration("20230711130458_AddNewsTagsTable")]
    partial class AddNewsTagsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AllrideApiCore.Entities.Activities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("club_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("creator_user_id")
                        .HasColumnType("integer");

                    b.Property<int>("group_id")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("route_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("club_id");

                    b.HasIndex("creator_user_id")
                        .IsUnique();

                    b.HasIndex("group_id");

                    b.HasIndex("route_id")
                        .IsUnique();

                    b.ToTable("activity");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Activities.ActivityMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityMember");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Buys.TouridePackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("touridePackage");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Chat.GroupMessage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("content_type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("group_id")
                        .HasColumnType("integer");

                    b.Property<string>("message_content")
                        .HasColumnType("text");

                    b.Property<int>("sender_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("group_messages");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Chat.Message", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("content_type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("message_content")
                        .HasColumnType("text");

                    b.Property<int>("recipient_id")
                        .HasColumnType("integer");

                    b.Property<int>("sender_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Clubs.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("backgroundCover_path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("group_members")
                        .HasColumnType("text[]");

                    b.Property<string>("image_path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("is_invite")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("profile_path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("club");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Clubs.ClubMember", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("ClubId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("active")
                        .HasColumnType("integer");

                    b.Property<int>("club_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("joined_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("role")
                        .HasColumnType("integer");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("ClubId");

                    b.HasIndex("UserId");

                    b.ToTable("club_member");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Clubs.ClubSocialPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClubId")
                        .HasColumnType("integer")
                        .HasColumnName("club_id");

                    b.Property<int>("ClubMemberId")
                        .HasColumnType("integer")
                        .HasColumnName("club_member_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("HashTag")
                        .HasColumnType("text")
                        .HasColumnName("hash_tag");

                    b.Property<int>("LikeUnlikeCount")
                        .HasColumnType("integer")
                        .HasColumnName("likeUnlike_count");

                    b.Property<string[]>("PostImagePath")
                        .HasColumnType("text[]")
                        .HasColumnName("post_image_path");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("ClubMemberId");

                    b.ToTable("clubsocial_post", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Clubs.ClubSocialPostComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClubMemberId")
                        .HasColumnType("integer")
                        .HasColumnName("clubMember_id");

                    b.Property<int>("ClubSocialPostId")
                        .HasColumnType("integer")
                        .HasColumnName("clubsocial_postid");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("ClubMemberId");

                    b.HasIndex("ClubSocialPostId");

                    b.ToTable("clubsocial_postcomment", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Commons.UserBlock", b =>
                {
                    b.Property<int>("BlockingUserId")
                        .HasColumnType("integer");

                    b.Property<int>("BlockedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("BlockingUserId", "BlockedUserId");

                    b.HasIndex("BlockedUserId");

                    b.ToTable("user_block");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Groups.Group", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("backgroundCover_path")
                        .HasColumnType("text");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("group_rank")
                        .HasColumnType("integer");

                    b.Property<string>("image_path")
                        .HasColumnType("text");

                    b.Property<int>("is_invite")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("CreatorId");

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Groups.GroupMember", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("active")
                        .HasColumnType("integer");

                    b.Property<int>("group_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("joined_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("role")
                        .HasColumnType("integer");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("group_id");

                    b.ToTable("group_member");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Groups.GroupSocialPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<int>("GroupMemberId")
                        .HasColumnType("integer")
                        .HasColumnName("group_member_id");

                    b.Property<string>("HashTag")
                        .HasColumnType("text")
                        .HasColumnName("hash_tag");

                    b.Property<int>("LikeUnlikeCount")
                        .HasColumnType("integer")
                        .HasColumnName("likeUnlike_count");

                    b.Property<string[]>("PostImagePath")
                        .HasColumnType("text[]")
                        .HasColumnName("post_image_path");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupMemberId");

                    b.ToTable("groupsocial_post", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Groups.GroupSocialPostComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_date");

                    b.Property<int>("GroupMemberId")
                        .HasColumnType("integer")
                        .HasColumnName("groupMember_id");

                    b.Property<int>("GroupSocialPostId")
                        .HasColumnType("integer")
                        .HasColumnName("groupsocial_postid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("GroupMemberId");

                    b.HasIndex("GroupSocialPostId");

                    b.ToTable("groupsocial_postcomment", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Here.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<Geometry>("DestinationPoint")
                        .HasColumnType("geometry")
                        .HasColumnName("destination_point");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision")
                        .HasColumnName("duration");

                    b.Property<int>("EditorAdvice")
                        .HasColumnType("integer")
                        .HasColumnName("editor_advice");

                    b.Property<Geometry>("Geoloc")
                        .HasColumnType("geometry")
                        .HasColumnName("geoloc");

                    b.Property<bool>("IsRoutePlanner")
                        .HasColumnType("boolean");

                    b.Property<double>("Length")
                        .HasColumnType("double precision")
                        .HasColumnName("length");

                    b.Property<Geometry>("OriginPoint")
                        .HasColumnType("geometry")
                        .HasColumnName("origin_point");

                    b.Property<string>("Public")
                        .HasColumnType("text")
                        .HasColumnName("public");

                    b.Property<int?>("RoutePlannerId")
                        .HasColumnType("integer");

                    b.Property<int>("RouteTransportModeId")
                        .HasColumnType("integer")
                        .HasColumnName("transport_type");

                    b.Property<int?>("RouteTransportModeId1")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<Geometry>("Waypoints")
                        .HasColumnType("geometry")
                        .HasColumnName("waypoints");

                    b.HasKey("Id");

                    b.HasIndex("RoutePlannerId");

                    b.HasIndex("RouteTransportModeId");

                    b.HasIndex("RouteTransportModeId1");

                    b.HasIndex("UserId");

                    b.ToTable("route", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Here.RouteInstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Instruction")
                        .HasColumnType("text")
                        .HasColumnName("instruction");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<int>("Offset")
                        .HasColumnType("integer")
                        .HasColumnName("offset");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer")
                        .HasColumnName("route_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("RouteId")
                        .IsUnique();

                    b.ToTable("route_instruction", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Here.RouteInstructionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string[]>("Action")
                        .HasColumnType("text[]")
                        .HasColumnName("action");

                    b.Property<string[]>("Direction")
                        .HasColumnType("text[]")
                        .HasColumnName("direction");

                    b.Property<int[]>("Duration")
                        .HasColumnType("integer[]")
                        .HasColumnName("duration");

                    b.Property<string[]>("Instruction")
                        .HasColumnType("text[]")
                        .HasColumnName("instruction");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<int[]>("Leng")
                        .HasColumnType("integer[]")
                        .HasColumnName("length");

                    b.Property<int[]>("Offset")
                        .HasColumnType("integer[]")
                        .HasColumnName("offset");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer")
                        .HasColumnName("route_id");

                    b.HasKey("Id");

                    b.ToTable("route_instruction_detail", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Here.RouteTransportMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Mode")
                        .HasColumnType("text")
                        .HasColumnName("mode");

                    b.HasKey("Id");

                    b.ToTable("route_transport_mode", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.LogApi", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("api_type")
                        .HasColumnType("integer");

                    b.Property<string>("client_ip")
                        .HasColumnType("text");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("request_param")
                        .HasColumnType("text");

                    b.Property<string>("response")
                        .HasColumnType("text");

                    b.Property<DateTime>("response_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("response_status")
                        .HasColumnType("integer");

                    b.Property<string>("service_name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("api_log");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DislikeCount")
                        .HasColumnType("integer")
                        .HasColumnName("dislikeCount");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer")
                        .HasColumnName("likeCount");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedAt");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("authorId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("news", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Newss.NewsTags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NewsId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int?>("TagsId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NewsId")
                        .IsUnique();

                    b.HasIndex("TagsId");

                    b.ToTable("news_tags");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.RoutePlanners.RoutePlanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCodeHex")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("RouteAlertTime")
                        .HasColumnType("interval");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<string>("RouteName")
                        .HasColumnType("text");

                    b.Property<string>("RoutePlannerTitle")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("route_planner");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.RoutePlanners.TasksRoutePlanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RoutePlannerId")
                        .HasColumnType("integer");

                    b.Property<string>("Tasks")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoutePlannerId");

                    b.ToTable("tasks_route_planner");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.RoutePlanners.UsersInRoutePlanning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RoutePlannerId")
                        .HasColumnType("integer");

                    b.Property<int>("SocialMediaFollower")
                        .HasColumnType("integer");

                    b.Property<int?>("SocialMediaFollowid")
                        .HasColumnType("integer");

                    b.Property<List<int>>("TasksId")
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoutePlannerId");

                    b.HasIndex("SocialMediaFollowid");

                    b.ToTable("users_InRoutePlanning");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Routes.FavouriteRoutes", b =>
                {
                    b.Property<int>("route_id")
                        .HasColumnType("integer");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.ToTable("user_favorite_route");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Routes.MyRoutes", b =>
                {
                    b.Property<int>("route_id")
                        .HasColumnType("integer");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.ToTable("user_my_route");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Routes.PublishedRoutes", b =>
                {
                    b.Property<int>("route_id")
                        .HasColumnType("integer");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.ToTable("user_shared_route");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Routes.RouteAltitude", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Geometry>("Geoloc")
                        .HasColumnType("geometry");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteAltitude");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Routes.RouteCalculate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Geometry>("geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry[]>("geom2")
                        .HasColumnType("geometry[]");

                    b.HasKey("Id");

                    b.ToTable("route_calculate");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Routes.RouteDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageDownhillSlope")
                        .HasColumnType("double precision")
                        .HasColumnName("avg_downhill_slope");

                    b.Property<double>("AverageUphillSlope")
                        .HasColumnType("double precision")
                        .HasColumnName("avg_uphill_slope");

                    b.Property<int>("FavoriteCounter")
                        .HasColumnType("integer")
                        .HasColumnName("favorite_counter");

                    b.Property<string>("ImageLocation")
                        .HasColumnType("text")
                        .HasColumnName("image_location");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer")
                        .HasColumnName("route_id");

                    b.HasKey("Id");

                    b.HasIndex("RouteId")
                        .IsUnique();

                    b.ToTable("route_detail", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.ServiceLimit.ServiceTypes", b =>
                {
                    b.Property<int>("service_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("service_id"));

                    b.Property<string>("service_name")
                        .HasColumnType("text")
                        .HasColumnName("service_name");

                    b.HasKey("service_id");

                    b.ToTable("service_types", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.ServiceLimit.ServiceUsage", b =>
                {
                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.Property<int>("service_id")
                        .HasColumnType("integer");

                    b.Property<int>("usage_count")
                        .HasColumnType("integer");

                    b.HasKey("user_id", "service_id");

                    b.HasIndex("service_id");

                    b.ToTable("service_usage");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.ServiceLimit.UserTypes", b =>
                {
                    b.Property<int>("type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("type"));

                    b.Property<int>("here_nearby_limit")
                        .HasColumnType("integer");

                    b.Property<int>("here_route_limit")
                        .HasColumnType("integer");

                    b.Property<int>("tomtom_along_limit")
                        .HasColumnType("integer");

                    b.Property<int>("tomtom_nearby_limit")
                        .HasColumnType("integer");

                    b.Property<int>("tomtom_routing_limit")
                        .HasColumnType("integer");

                    b.Property<int>("weather_limit")
                        .HasColumnType("integer");

                    b.HasKey("type");

                    b.ToTable("user_types");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.SmsVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("verification_code");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("sms_verification", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.SocialMedia.SocialMediaComments", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("post_id")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("social_media_comments");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.SocialMedia.SocialMediaFollow", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("followed_id")
                        .HasColumnType("integer");

                    b.Property<int>("follower_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("social_media_follows");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.SocialMedia.SocialMediaLike", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("post_id")
                        .HasColumnType("integer");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("social_media_likes");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.SocialMedia.SocialMediaPosts", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<List<int>>("LikedByUsers")
                        .HasColumnType("integer[]");

                    b.Property<string>("caption")
                        .HasColumnType("text");

                    b.Property<int?>("comments_count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("likes_count")
                        .HasColumnType("integer");

                    b.Property<string>("location_info")
                        .HasColumnType("text");

                    b.Property<string>("media_url")
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("social_media_posts");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.SocialMedia.SocialMediaStory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("caption")
                        .HasColumnType("text");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("location_info")
                        .HasColumnType("text");

                    b.Property<string>("media_url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("social_media_story");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Users.MemberShip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MemberShipType")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MemberShip");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Users.OnlineUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("online_users");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Users.UserDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint")
                        .HasColumnName("gender");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PpPath")
                        .HasColumnType("text")
                        .HasColumnName("pp_path");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("VehicleType")
                        .HasColumnType("text")
                        .HasColumnName("vehicle_type");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_detail", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Users.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActiveUser")
                        .HasColumnType("boolean")
                        .HasColumnName("active_user");

                    b.Property<int>("AppleId")
                        .HasColumnType("integer")
                        .HasColumnName("apple_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("FacebookId")
                        .HasColumnType("integer")
                        .HasColumnName("facebook_id");

                    b.Property<int>("GoogleId")
                        .HasColumnType("integer")
                        .HasColumnName("google_id");

                    b.Property<int>("InstagramId")
                        .HasColumnType("integer")
                        .HasColumnName("instagram_id");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResfreshTokenEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<bool>("VerifiedMember")
                        .HasColumnType("boolean")
                        .HasColumnName("verified_member");

                    b.Property<int>("forgot_password_code")
                        .HasColumnType("integer")
                        .HasColumnName("forgot_password_code");

                    b.Property<int>("user_type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Users.UserInvites", b =>
                {
                    b.Property<int>("inveting_id")
                        .HasColumnType("integer");

                    b.Property<int>("invited_id")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("invitedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("status")
                        .HasColumnType("boolean");

                    b.Property<int>("where")
                        .HasColumnType("integer");

                    b.Property<int>("whereId")
                        .HasColumnType("integer");

                    b.HasKey("inveting_id", "invited_id");

                    b.HasIndex("invited_id");

                    b.ToTable("user_invites");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Users.UserNewsReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("NewsId")
                        .HasColumnType("integer")
                        .HasColumnName("news_id");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("UserId");

                    b.ToTable("user_news_reaction", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Users.UserPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<byte[]>("HashPass")
                        .HasColumnType("bytea")
                        .HasColumnName("hash_pass");

                    b.Property<byte[]>("SaltPass")
                        .HasColumnType("bytea")
                        .HasColumnName("salt_pass");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_password", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Weathers.Weather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_time");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datetime");

                    b.Property<Geometry>("Geoloc")
                        .HasColumnType("geometry")
                        .HasColumnName("geoloc");

                    b.Property<int>("GrndLevel")
                        .HasColumnType("integer")
                        .HasColumnName("grnd_level");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer")
                        .HasColumnName("humidity");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<double>("Predection3h")
                        .HasColumnType("double precision")
                        .HasColumnName("predection_3h");

                    b.Property<int>("Pressure")
                        .HasColumnType("integer")
                        .HasColumnName("pressure");

                    b.Property<int>("SeaLevel")
                        .HasColumnType("integer")
                        .HasColumnName("sea_level");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_time");

                    b.Property<string>("WeatherDescription")
                        .HasColumnType("text")
                        .HasColumnName("weather_description");

                    b.Property<int>("WeatherId")
                        .HasColumnType("integer")
                        .HasColumnName("weather_id");

                    b.Property<int>("WindDeg")
                        .HasColumnType("integer")
                        .HasColumnName("wind_deg");

                    b.Property<int>("WindGust")
                        .HasColumnType("integer")
                        .HasColumnName("wind_gust");

                    b.Property<int>("WindSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("wind_speed");

                    b.HasKey("Id");

                    b.ToTable("weather", (string)null);
                });

            modelBuilder.Entity("AllrideApiCore.Tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AllrideApiRepository.Repositories.Concrete.ClubNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("clubId")
                        .HasColumnType("integer");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<DateTime>("sendDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("club_notification");
                });

            modelBuilder.Entity("AllrideApiRepository.Repositories.Concrete.ClubNotificationMuteSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("clubId")
                        .HasColumnType("integer");

                    b.Property<bool>("isMute")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("club_notification_mute_settings");
                });

            modelBuilder.Entity("AllrideApiRepository.Repositories.Concrete.GroupNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<int>("groupId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("sendDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("group_notification");
                });

            modelBuilder.Entity("AllrideApiRepository.Repositories.Concrete.GroupNotificationMuteSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("groupId")
                        .HasColumnType("integer");

                    b.Property<bool>("isMute")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("group_notification_mute_settings");
                });

            modelBuilder.Entity("AllrideApiRepository.Repositories.Concrete.NotificationTimeCatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("notification_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("sendDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("type")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("notification_time_catch");
                });

            modelBuilder.Entity("AllrideApiRepository.Repositories.Concrete.PersonNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<DateTime>("sendDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("person_notification");
                });

            modelBuilder.Entity("AllrideApiRepository.Repositories.Concrete.PersonNotificationMuteSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("isMute")
                        .HasColumnType("boolean");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("person_notification_mute_settings");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Activities.Activity", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Clubs.Club", "Club")
                        .WithMany("activities")
                        .HasForeignKey("club_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "Users")
                        .WithOne("act")
                        .HasForeignKey("AllrideApiCore.Entities.Activities.Activity", "creator_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllrideApiCore.Entities.Groups.Group", "Group")
                        .WithMany("activities")
                        .HasForeignKey("group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllrideApiCore.Entities.Here.Route", "Route")
                        .WithOne("Activity")
                        .HasForeignKey("AllrideApiCore.Entities.Activities.Activity", "route_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Group");

                    b.Navigation("Route");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Activities.ActivityMember", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Activities.Activity", "Activitiy")
                        .WithMany("ActivityMembers")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activitiy");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Clubs.Club", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Clubs.ClubMember", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Clubs.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Clubs.ClubSocialPost", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Clubs.Club", "Club")
                        .WithMany("ClubSocialPost")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllrideApiCore.Entities.Clubs.ClubMember", "ClubMember")
                        .WithMany("ClubSocialPost")
                        .HasForeignKey("ClubMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("ClubMember");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Clubs.ClubSocialPostComment", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Clubs.ClubMember", "ClubMember")
                        .WithMany()
                        .HasForeignKey("ClubMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllrideApiCore.Entities.Clubs.ClubSocialPost", "ClubSocialPost")
                        .WithMany("ClubSocialPostComment")
                        .HasForeignKey("ClubSocialPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClubMember");

                    b.Navigation("ClubSocialPost");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Commons.UserBlock", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "UserBlocked")
                        .WithMany("BlockedUserBlocks")
                        .HasForeignKey("BlockedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "UserBlocking")
                        .WithMany("BlockingUserBlocks")
                        .HasForeignKey("BlockingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserBlocked");

                    b.Navigation("UserBlocking");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Groups.Group", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Groups.GroupMember", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Groups.Group", "Group")
                        .WithMany()
                        .HasForeignKey("group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Groups.GroupSocialPost", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Groups.Group", "Group")
                        .WithMany("GroupSocialPost")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllrideApiCore.Entities.Groups.GroupMember", "GroupMember")
                        .WithMany("GroupSocialPost")
                        .HasForeignKey("GroupMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("GroupMember");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Groups.GroupSocialPostComment", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Groups.GroupMember", "GroupMember")
                        .WithMany()
                        .HasForeignKey("GroupMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllrideApiCore.Entities.Groups.GroupSocialPost", "GroupSocialPost")
                        .WithMany("GroupSocialPostComment")
                        .HasForeignKey("GroupSocialPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupMember");

                    b.Navigation("GroupSocialPost");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Here.Route", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.RoutePlanners.RoutePlanner", "RoutePlanner")
                        .WithMany("Route")
                        .HasForeignKey("RoutePlannerId");

                    b.HasOne("AllrideApiCore.Entities.Here.RouteTransportMode", "RouteTransportMode")
                        .WithMany()
                        .HasForeignKey("RouteTransportModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllrideApiCore.Entities.Here.RouteTransportMode", null)
                        .WithMany("Route")
                        .HasForeignKey("RouteTransportModeId1");

                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "User")
                        .WithMany("Routes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoutePlanner");

                    b.Navigation("RouteTransportMode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Here.RouteInstruction", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Here.Route", "Route")
                        .WithOne("RouteInstruction")
                        .HasForeignKey("AllrideApiCore.Entities.Here.RouteInstruction", "RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.News", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "User")
                        .WithMany("News")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Newss.NewsTags", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.News", "News")
                        .WithOne("NewsTags")
                        .HasForeignKey("AllrideApiCore.Entities.Newss.NewsTags", "NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllrideApiCore.Tags", "Tags")
                        .WithMany("NewsTagss")
                        .HasForeignKey("TagsId");

                    b.Navigation("News");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.RoutePlanners.RoutePlanner", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "UserEntities")
                        .WithMany("RoutePlanners")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntities");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.RoutePlanners.TasksRoutePlanner", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.RoutePlanners.RoutePlanner", "RoutePlanner")
                        .WithMany("TasksRoutePlanners")
                        .HasForeignKey("RoutePlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoutePlanner");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.RoutePlanners.UsersInRoutePlanning", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.RoutePlanners.RoutePlanner", "RoutePlanner")
                        .WithMany("UsersInRoutePlannings")
                        .HasForeignKey("RoutePlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllrideApiCore.Entities.SocialMedia.SocialMediaFollow", "SocialMediaFollow")
                        .WithMany()
                        .HasForeignKey("SocialMediaFollowid");

                    b.Navigation("RoutePlanner");

                    b.Navigation("SocialMediaFollow");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Routes.RouteAltitude", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Here.Route", "Route")
                        .WithMany("RouteAltitudes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Routes.RouteDetail", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Here.Route", "Route")
                        .WithOne("RouteDetail")
                        .HasForeignKey("AllrideApiCore.Entities.Routes.RouteDetail", "RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.ServiceLimit.ServiceUsage", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.ServiceLimit.ServiceTypes", "ServiceTypes")
                        .WithMany("service_usages")
                        .HasForeignKey("service_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "User")
                        .WithMany("ServiceUsages")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceTypes");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.SmsVerification", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "User")
                        .WithOne("SmsVerification")
                        .HasForeignKey("AllrideApiCore.Entities.SmsVerification", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Users.MemberShip", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "User")
                        .WithOne("MemberShip")
                        .HasForeignKey("AllrideApiCore.Entities.Users.MemberShip", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Users.UserDetail", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("AllrideApiCore.Entities.Users.UserDetail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Users.UserInvites", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "UserInviting")
                        .WithMany("InvitingUser")
                        .HasForeignKey("inveting_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "UserInvited")
                        .WithMany("InvitedUser")
                        .HasForeignKey("invited_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserInvited");

                    b.Navigation("UserInviting");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Users.UserNewsReaction", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.News", "News")
                        .WithMany("UserNewsReactions")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "User")
                        .WithMany("UserNewsReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Users.UserPassword", b =>
                {
                    b.HasOne("AllrideApiCore.Entities.Users.UserEntity", "User")
                        .WithOne("UserPassword")
                        .HasForeignKey("AllrideApiCore.Entities.Users.UserPassword", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Activities.Activity", b =>
                {
                    b.Navigation("ActivityMembers");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Clubs.Club", b =>
                {
                    b.Navigation("ClubSocialPost");

                    b.Navigation("activities");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Clubs.ClubMember", b =>
                {
                    b.Navigation("ClubSocialPost");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Clubs.ClubSocialPost", b =>
                {
                    b.Navigation("ClubSocialPostComment");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Groups.Group", b =>
                {
                    b.Navigation("GroupSocialPost");

                    b.Navigation("activities");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Groups.GroupMember", b =>
                {
                    b.Navigation("GroupSocialPost");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Groups.GroupSocialPost", b =>
                {
                    b.Navigation("GroupSocialPostComment");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Here.Route", b =>
                {
                    b.Navigation("Activity");

                    b.Navigation("RouteAltitudes");

                    b.Navigation("RouteDetail");

                    b.Navigation("RouteInstruction");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Here.RouteTransportMode", b =>
                {
                    b.Navigation("Route");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.News", b =>
                {
                    b.Navigation("NewsTags");

                    b.Navigation("UserNewsReactions");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.RoutePlanners.RoutePlanner", b =>
                {
                    b.Navigation("Route");

                    b.Navigation("TasksRoutePlanners");

                    b.Navigation("UsersInRoutePlannings");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.ServiceLimit.ServiceTypes", b =>
                {
                    b.Navigation("service_usages");
                });

            modelBuilder.Entity("AllrideApiCore.Entities.Users.UserEntity", b =>
                {
                    b.Navigation("BlockedUserBlocks");

                    b.Navigation("BlockingUserBlocks");

                    b.Navigation("InvitedUser");

                    b.Navigation("InvitingUser");

                    b.Navigation("MemberShip");

                    b.Navigation("News");

                    b.Navigation("RoutePlanners");

                    b.Navigation("Routes");

                    b.Navigation("ServiceUsages");

                    b.Navigation("SmsVerification");

                    b.Navigation("UserDetail");

                    b.Navigation("UserNewsReactions");

                    b.Navigation("UserPassword");

                    b.Navigation("act");
                });

            modelBuilder.Entity("AllrideApiCore.Tags", b =>
                {
                    b.Navigation("NewsTagss");
                });
#pragma warning restore 612, 618
        }
    }
}
